// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251001001101_Add-Shopping-Carts-And-Cart-Items")]
    partial class AddShoppingCartsAndCartItems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Api.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("SpecialTag")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Категория 1",
                            Description = "Направлений деятельности прежде начало.",
                            Image = "https://placehold.co/200x150",
                            Name = "Свободный Бетонный Свитер",
                            Price = 358.60m,
                            SpecialTag = "Рекомендуемое"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Категория 1",
                            Description = "Богатый значение с выбранный.",
                            Image = "https://placehold.co/200x150",
                            Name = "Фантастический Кожанный Стул",
                            Price = 249.42m,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Категория 1",
                            Description = "Однако участниками сфера структура количественный нас забывать работы.",
                            Image = "https://placehold.co/200x150",
                            Name = "Невероятный Меховой Шарф",
                            Price = 627.97m,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Категория 3",
                            Description = "Оценить существующий напрямую.",
                            Image = "https://placehold.co/200x150",
                            Name = "Большой Стальной Майка",
                            Price = 114.49m,
                            SpecialTag = "Популярное"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Категория 3",
                            Description = "Обеспечивает однако постоянный интересный прогресса общественной сомнений.",
                            Image = "https://placehold.co/200x150",
                            Name = "Великолепный Меховой Клатч",
                            Price = 312.02m,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Категория 2",
                            Description = "Кадровой влечёт разнообразный предложений значительной задача целесообразности.",
                            Image = "https://placehold.co/200x150",
                            Name = "Невероятный Бетонный Куртка",
                            Price = 994.88m,
                            SpecialTag = "Рекомендуемое"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Категория 2",
                            Description = "Общественной а путь.",
                            Image = "https://placehold.co/200x150",
                            Name = "Маленький Кожанный Автомобиль",
                            Price = 501.54m,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Категория 2",
                            Description = "Ресурсосберегающих новых нас уточнения однако от кругу технологий по.",
                            Image = "https://placehold.co/200x150",
                            Name = "Практичный Пластиковый Ботинок",
                            Price = 368.57m,
                            SpecialTag = "Популярное"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Категория 1",
                            Description = "Же модернизации формировании кадров всего модели высшего и.",
                            Image = "https://placehold.co/200x150",
                            Name = "Фантастический Бетонный Компьютер",
                            Price = 118.55m,
                            SpecialTag = "Рекомендуемое"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Категория 2",
                            Description = "Вызывает нашей социально-ориентированный занимаемых не проблем сложившаяся образом значение материально-технической.",
                            Image = "https://placehold.co/200x150",
                            Name = "Потрясающий Деревянный Берет",
                            Price = 501.52m,
                            SpecialTag = "Рекомендуемое"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Категория 3",
                            Description = "Общественной дальнейших очевидна проект рамки.",
                            Image = "https://placehold.co/200x150",
                            Name = "Интеллектуальный Хлопковый Компьютер",
                            Price = 476.35m,
                            SpecialTag = "Популярное"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Категория 1",
                            Description = "Современного проверки важные.",
                            Image = "https://placehold.co/200x150",
                            Name = "Потрясающий Натуральный Свитер",
                            Price = 985.01m,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Категория 2",
                            Description = "Укрепления напрямую формировании сознания анализа изменений укрепления.",
                            Image = "https://placehold.co/200x150",
                            Name = "Лоснящийся Бетонный Носки",
                            Price = 475.25m,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Категория 3",
                            Description = "Информационно-пропогандистское процесс процесс особенности плановых обеспечение.",
                            Image = "https://placehold.co/200x150",
                            Name = "Большой Резиновый Кепка",
                            Price = 157.84m,
                            SpecialTag = "Рекомендуемое"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Категория 1",
                            Description = "Представляет задач определения проверки следует участия новых общественной.",
                            Image = "https://placehold.co/200x150",
                            Name = "Потрясающий Деревянный Носки",
                            Price = 264.93m,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Категория 2",
                            Description = "Равным высокотехнологичная активности принимаемых повышение важные эксперимент прогрессивного.",
                            Image = "https://placehold.co/200x150",
                            Name = "Большой Резиновый Куртка",
                            Price = 259.08m,
                            SpecialTag = "Популярное"
                        },
                        new
                        {
                            Id = 17,
                            Category = "Категория 2",
                            Description = "Позволяет собой обеспечение формировании создание.",
                            Image = "https://placehold.co/200x150",
                            Name = "Грубый Стальной Компьютер",
                            Price = 15.16m,
                            SpecialTag = "Рекомендуемое"
                        },
                        new
                        {
                            Id = 18,
                            Category = "Категория 3",
                            Description = "Позиции определения позиции понимание представляет.",
                            Image = "https://placehold.co/200x150",
                            Name = "Свободный Неодимовый Компьютер",
                            Price = 914.69m,
                            SpecialTag = "Популярное"
                        },
                        new
                        {
                            Id = 19,
                            Category = "Категория 1",
                            Description = "Также принципов новых.",
                            Image = "https://placehold.co/200x150",
                            Name = "Великолепный Натуральный Берет",
                            Price = 462.91m,
                            SpecialTag = "Рекомендуемое"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Категория 1",
                            Description = "Качественно концепция массового и создаёт обеспечение.",
                            Image = "https://placehold.co/200x150",
                            Name = "Великолепный Меховой Кулон",
                            Price = 37.32m,
                            SpecialTag = "Рекомендуемое"
                        });
                });

            modelBuilder.Entity("Api.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Api.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Api.Models.CartItem", b =>
                {
                    b.HasOne("Api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.ShoppingCart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
