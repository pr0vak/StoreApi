// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251005074544_Add-Order-Details-And-Order-Headers")]
    partial class AddOrderDetailsAndOrderHeaders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Api.Models.OrderDetails", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderDetailId"));

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Api.Models.OrderHeader", b =>
                {
                    b.Property<int>("OrderHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderHeaderId"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("OrderTotalAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("TotalCount")
                        .HasColumnType("integer");

                    b.HasKey("OrderHeaderId");

                    b.HasIndex("AppUserId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("Api.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("SpecialTag")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Категория 3",
                            Description = "Постоянный понимание прогрессивного обучения изменений разработке реализация.",
                            Image = "https://placehold.co/200x150",
                            Name = "Лоснящийся Гранитный Ножницы",
                            Price = 54.23m,
                            SpecialTag = "Популярное"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Категория 1",
                            Description = "Поставленных понимание организационной.",
                            Image = "https://placehold.co/200x150",
                            Name = "Фантастический Гранитный Стол",
                            Price = 857.07m,
                            SpecialTag = "Популярное"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Категория 1",
                            Description = "Участниками выполнять шагов модель определения экономической прогресса.",
                            Image = "https://placehold.co/200x150",
                            Name = "Практичный Хлопковый Кошелек",
                            Price = 744.02m,
                            SpecialTag = "Рекомендуемое"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Категория 1",
                            Description = "Однако определения с.",
                            Image = "https://placehold.co/200x150",
                            Name = "Потрясающий Меховой Кулон",
                            Price = 868.48m,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Категория 3",
                            Description = "Деятельности разнообразный материально-технической.",
                            Image = "https://placehold.co/200x150",
                            Name = "Интеллектуальный Хлопковый Майка",
                            Price = 443.26m,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Категория 1",
                            Description = "Последовательного создание соображения образом проблем воздействия активизации задача воздействия равным.",
                            Image = "https://placehold.co/200x150",
                            Name = "Практичный Резиновый Кепка",
                            Price = 42.82m,
                            SpecialTag = "Рекомендуемое"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Категория 1",
                            Description = "Количественный курс участия формированию значительной рост формировании.",
                            Image = "https://placehold.co/200x150",
                            Name = "Невероятный Стальной Свитер",
                            Price = 275.63m,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Категория 3",
                            Description = "Разнообразный что значительной сущности забывать новая процесс оценить нас по.",
                            Image = "https://placehold.co/200x150",
                            Name = "Большой Пластиковый Стол",
                            Price = 276.31m,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Категория 1",
                            Description = "Инновационный демократической задача значимость значимость условий кадровой.",
                            Image = "https://placehold.co/200x150",
                            Name = "Маленький Пластиковый Шарф",
                            Price = 640.75m,
                            SpecialTag = "Популярное"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Категория 3",
                            Description = "Насущным а модели общества влечёт.",
                            Image = "https://placehold.co/200x150",
                            Name = "Великолепный Кожанный Кепка",
                            Price = 262.44m,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Категория 2",
                            Description = "Национальный направлений модели.",
                            Image = "https://placehold.co/200x150",
                            Name = "Фантастический Гранитный Ножницы",
                            Price = 594.50m,
                            SpecialTag = "Популярное"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Категория 1",
                            Description = "Условий требует материально-технической поставленных мира роль также участниками количественный.",
                            Image = "https://placehold.co/200x150",
                            Name = "Лоснящийся Бетонный Компьютер",
                            Price = 979.28m,
                            SpecialTag = "Рекомендуемое"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Категория 2",
                            Description = "Стороны материально-технической этих различных важную форм активом.",
                            Image = "https://placehold.co/200x150",
                            Name = "Фантастический Гранитный Свитер",
                            Price = 346.00m,
                            SpecialTag = "Популярное"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Категория 1",
                            Description = "Различных подготовке целесообразности формирования рамки технологий настолько кадровой структура проект.",
                            Image = "https://placehold.co/200x150",
                            Name = "Эргономичный Бетонный Ножницы",
                            Price = 767.89m,
                            SpecialTag = "Популярное"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Категория 2",
                            Description = "Существующий прогресса прогресса.",
                            Image = "https://placehold.co/200x150",
                            Name = "Потрясающий Гранитный Берет",
                            Price = 402.42m,
                            SpecialTag = "Популярное"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Категория 1",
                            Description = "Актуальность значительной организационной для высшего повышение.",
                            Image = "https://placehold.co/200x150",
                            Name = "Невероятный Кожанный Ножницы",
                            Price = 25.78m,
                            SpecialTag = "Популярное"
                        },
                        new
                        {
                            Id = 17,
                            Category = "Категория 1",
                            Description = "Намеченных соответствующей информационно-пропогандистское роль массового проблем очевидна степени.",
                            Image = "https://placehold.co/200x150",
                            Name = "Эргономичный Резиновый Кулон",
                            Price = 988.29m,
                            SpecialTag = "Рекомендуемое"
                        },
                        new
                        {
                            Id = 18,
                            Category = "Категория 3",
                            Description = "Не концепция настолько.",
                            Image = "https://placehold.co/200x150",
                            Name = "Великолепный Неодимовый Кошелек",
                            Price = 528.61m,
                            SpecialTag = "Рекомендуемое"
                        },
                        new
                        {
                            Id = 19,
                            Category = "Категория 2",
                            Description = "Нами задания социально-экономическое выполнять.",
                            Image = "https://placehold.co/200x150",
                            Name = "Большой Меховой Портмоне",
                            Price = 53.91m,
                            SpecialTag = "Популярное"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Категория 3",
                            Description = "Проект принимаемых существующий концепция играет.",
                            Image = "https://placehold.co/200x150",
                            Name = "Свободный Хлопковый Компьютер",
                            Price = 245.76m,
                            SpecialTag = "Новинка"
                        });
                });

            modelBuilder.Entity("Api.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Api.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Api.Models.CartItem", b =>
                {
                    b.HasOne("Api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.ShoppingCart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Api.Models.OrderDetails", b =>
                {
                    b.HasOne("Api.Models.OrderHeader", null)
                        .WithMany("OrderDetailItems")
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Api.Models.OrderHeader", b =>
                {
                    b.HasOne("Api.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Models.OrderHeader", b =>
                {
                    b.Navigation("OrderDetailItems");
                });

            modelBuilder.Entity("Api.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
